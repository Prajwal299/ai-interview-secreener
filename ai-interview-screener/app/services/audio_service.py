import logging
import requests
import speech_recognition as sr
import os
from flask import current_app
import uuid
from vosk import Model, KaldiRecognizer
import wave
import json
import subprocess

logger = logging.getLogger(__name__)

class AudioService:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.upload_folder = current_app.config.get('UPLOAD_FOLDER', 'instance/uploads')
        self.vosk_model_path = os.path.join(current_app.config.get('BASE_DIR', ''), 'models', 'vosk-model-small-en-us-0.15')
        
        # Ensure upload folder exists
        if not os.path.exists(self.upload_folder):
            os.makedirs(self.upload_folder, exist_ok=True)
        
        # Initialize Vosk model
        if not os.path.exists(self.vosk_model_path):
            logger.error(f"Vosk model not found at {self.vosk_model_path}")
            raise FileNotFoundError(f"Vosk model not found at {self.vosk_model_path}")
        self.vosk_model = Model(self.vosk_model_path)

    def _convert_audio_to_wav(self, input_path, output_path):
        """Convert audio to WAV format with mono channel, 16-bit, 16000 Hz using ffmpeg"""
        try:
            command = [
                'ffmpeg', '-i', input_path,
                '-ac', '1',  # Mono channel
                '-ar', '16000',  # 16000 Hz sampling rate
                '-sample_fmt', 's16',  # 16-bit sample format
                '-y',  # Overwrite output file if it exists
                output_path
            ]
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            logger.info(f"Audio converted successfully to {output_path}")
            return True
        except subprocess.CalledProcessError as e:
            logger.error(f"ffmpeg conversion failed: {e.stderr}")
            return False
        except FileNotFoundError:
            logger.error("ffmpeg is not installed or not found in PATH")
            return False

    def speech_to_text(self, audio_file_path):
        """Convert speech to text using Vosk"""
        try:
            # Check audio format
            wf = wave.open(audio_file_path, "rb")
            if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getframerate() != 16000:
                logger.warning(f"Audio format not suitable for Vosk: channels={wf.getnchannels()}, sample_width={wf.getsampwidth()}, framerate={wf.getframerate()}")
                temp_file = os.path.join(self.upload_folder, f"temp_{uuid.uuid4().hex}.wav")
                wf.close()
                
                # Convert audio to the required format
                if not self._convert_audio_to_wav(audio_file_path, temp_file):
                    logger.error("Audio conversion failed, cannot process with Vosk")
                    return ""
                audio_file_path = temp_file
            else:
                wf.close()

            # Open the (possibly converted) audio file
            wf = wave.open(audio_file_path, "rb")
            recognizer = KaldiRecognizer(self.vosk_model, wf.getframerate())
            recognizer.SetMaxAlternatives(0)  # Disable alternatives for simplicity
            transcript = ""
            
            while True:
                data = wf.readframes(4000)
                if len(data) == 0:
                    break
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    transcript += result.get("text", "") + " "
            
            # Get any remaining partial results
            result = json.loads(recognizer.FinalResult())
            transcript += result.get("text", "")
            transcript = transcript.strip()
            
            wf.close()
            if 'temp_file' in locals() and os.path.exists(temp_file):
                os.remove(temp_file)
            
            if transcript:
                logger.info(f"Transcript from Vosk: {transcript}")
                return transcript
            else:
                logger.warning("No transcript generated by Vosk")
                return ""
                
        except Exception as e:
            logger.error(f"Error in speech_to_text with Vosk: {str(e)}")
            if 'wf' in locals():
                wf.close()
            if 'temp_file' in locals() and os.path.exists(temp_file):
                os.remove(temp_file)
            return ""
    
    def download_recording(self, recording_url, call_sid):
        """Download Twilio recording"""
        try:
            auth = (current_app.config['TWILIO_ACCOUNT_SID'], current_app.config['TWILIO_AUTH_TOKEN'])
            response = requests.get(recording_url, auth=auth)
            response.raise_for_status()
            
            filename = f"recording_{call_sid}_{uuid.uuid4().hex}.wav"
            file_path = os.path.join(self.upload_folder, filename)
            
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            logger.info(f"Downloaded recording to {file_path}")
            return file_path
                
        except Exception as e:
            logger.error(f"Error downloading recording: {str(e)}")
            raise