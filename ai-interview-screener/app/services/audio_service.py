import logging
import requests
import speech_recognition as sr
import os
from flask import current_app
import uuid
from vosk import Model, KaldiRecognizer
import wave
import json

logger = logging.getLogger(__name__)

class AudioService:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.upload_folder = current_app.config.get('UPLOAD_FOLDER', 'instance/uploads')
        self.vosk_model_path = os.path.join(current_app.config.get('BASE_DIR', ''), 'models', 'vosk-model-small-en-us-0.15')
        
        # Ensure upload folder exists
        if not os.path.exists(self.upload_folder):
            os.makedirs(self.upload_folder, exist_ok=True)
        
        # Initialize Vosk model
        if not os.path.exists(self.vosk_model_path):
            logger.error(f"Vosk model not found at {self.vosk_model_path}")
            raise FileNotFoundError(f"Vosk model not found at {self.vosk_model_path}")
        self.vosk_model = Model(self.vosk_model_path)

    def speech_to_text(self, audio_file_path):
        """Convert speech to text using Vosk"""
        try:
            # Ensure the audio is in WAV format with correct parameters
            wf = wave.open(audio_file_path, "rb")
            if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getframerate() not in [8000, 16000, 44100]:
                logger.warning("Audio format not suitable for Vosk, attempting conversion")
                # Convert using a temporary file (you may need to install ffmpeg)
                temp_file = os.path.join(self.upload_folder, f"temp_{uuid.uuid4().hex}.wav")
                os.system(f"ffmpeg -i {audio_file_path} -ac 1 -ar 16000 -sample_fmt s16 {temp_file}")
                wf.close()
                wf = wave.open(temp_file, "rb")
            
            recognizer = KaldiRecognizer(self.vosk_model, wf.getframerate())
            transcript = ""
            
            while True:
                data = wf.readframes(4000)
                if len(data) == 0:
                    break
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    transcript += result.get("text", "") + " "
            
            # Get any remaining partial results
            result = json.loads(recognizer.FinalResult())
            transcript += result.get("text", "")
            transcript = transcript.strip()
            
            wf.close()
            if 'temp_file' in locals():
                os.remove(temp_file)
            
            if transcript:
                logger.info(f"Transcript from Vosk: {transcript}")
                return transcript
            else:
                logger.warning("No transcript generated by Vosk")
                return ""
                
        except Exception as e:
            logger.error(f"Error in speech_to_text with Vosk: {str(e)}")
            return ""
    
    def download_recording(self, recording_url, call_sid):
        """Download Twilio recording"""
        try:
            auth = (current_app.config['TWILIO_ACCOUNT_SID'], current_app.config['TWILIO_AUTH_TOKEN'])
            response = requests.get(recording_url, auth=auth)
            response.raise_for_status()
            
            filename = f"recording_{call_sid}_{uuid.uuid4().hex}.wav"
            file_path = os.path.join(self.upload_folder, filename)
            
            with open(file_path, 'wb') as f:
                f.write(response.content)
            
            logger.info(f"Downloaded recording to {file_path}")
            return file_path
                
        except Exception as e:
            logger.error(f"Error downloading recording: {str(e)}")
            raise